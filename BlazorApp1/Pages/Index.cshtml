
@addTagHelper *, BlazorLib1
@using BlazorLib1
@using BlazorLib1.Classes
@using Microsoft.AspNetCore.Blazor.Browser.Interop;
@using Microsoft.AspNetCore.Blazor.Components;
@using Microsoft.AspNetCore.Blazor.RenderTree;
@page "/"

<style>
    .flex-container {
        display: flex;
        background-color: lightblue;
        margin: 10px;
        padding: 20px;
    }

        .flex-container > div {
            background-color: #f1f1f1;
            margin: 10px;
            padding: 20px;
            font-size: 12px;
        }
</style>



<h2>Hello, welcome to my experiment :)</h2>

<br>

<h4>My goal is not beauty, good colors and interface is designers job :) My goal is <b>complexity</b>, to touch more aspects of drawing.</h4>


<br>

<h5>You can watch youtube <a href="https://www.youtube.com/watch?v=fuZSaYmqgCs&t=7s" target="_blank">video</a> about this project</h5>

<h6>Feel free to <a href="mailto:VakhtangiAbashidze@gmail.com" target="_blank">contact</a> me</h6>

<br>




<div class="flex-container">

    @foreach (var city in Cities_List)
    {
        <button type="button" class="close" aria-label="Close" onclick=@(() => RemoveCity(city))>
            <span aria-hidden="true">&times;</span>
        </button>

        <div>

            <Component1 city="@city" ref="@city.component1_related" />

        </div>


    }



</div>



<div class="flex-container">


    <div>
        CityName
        <input bind="@Curr_City.Name" type="text" placeholder="enter city name" />
    </div>
    <div>
        time diff
        <input bind="@Curr_City.TimeDiff" type="number" min="-12" max="14" placeholder="time diff" />
    </div>
    <div>
        width/height
        <input bind="@Curr_City.WidthAndHeight" type="number" min="100" max="500" placeholder="WidthAndHeight" />
    </div>
    <div>
        <button class="btn btn-primary" onclick="@Add_Clock">Add Clock</button>
    </div>

</div>

<canvas id="canvas1" width="500" height="500"></canvas>


<button class="btn btn-primary" onclick="@abc">draw ordinal canvas</button>



@functions {


    bool IsPageLoaded = false;




    City Curr_City = new City();


    List<City> Cities_List = new List<City>() {
  new City() { ID=1, Name = "New York", WidthAndHeight = 400, TimeDiff=-5},
  new City() { ID=2, Name = "Tbilisi", WidthAndHeight = 400, TimeDiff=3},
 // new City() { ID=3, Name = "London", WidthAndHeight = 400, TimeDiff=1},
};


    void abc()
    {

        RegisteredFunction.Invoke<bool>("JavaScriptDrawCanvas", "canvas1");

    }

    void Add_Clock()
    {
        if (Cities_List.Any())
        {
            Curr_City.ID = Cities_List.Max(x => x.ID) + 1;
        }
        else
        {
            Curr_City.ID = 1;

        }

        if (Curr_City.WidthAndHeight == 0)
        {
            Curr_City.WidthAndHeight = 300;

        }


        Cities_List.Add(Curr_City);
        Curr_City = new City();





        this.StateHasChanged();
    }


    protected override void OnAfterRender()
    {

        //Console.WriteLine("       ------");
        //Console.WriteLine("onafterrender ");
        //foreach (var item in Cities_List)
        //{
        //    item.component1_related.Canvas_ID = item.component1_related.Canvas_ID;
        //    Console.WriteLine(item.Name + " " + item.component1_related.city.Name + " " + item.component1_related.Canvas_ID);
        //}
        //Console.WriteLine("       ------");

        //foreach (City city in Cities_List.Where(x => x.component1_related.IsSubscribedForOnDelete == false))
        //{

        //    city.component1_related.onDelete += HandleOnDelete;
        //    city.component1_related.IsSubscribedForOnDelete = true;
        //}



    }


    void RemoveComponent(int ID)
    {

        RemoveCity(ID);

    }

    void RemoveCity(City c)
    {
      
        Cities_List.Remove(c);
        this.StateHasChanged();

    }

    void RemoveCity(int ID)
    {

        City c = Cities_List.Single(X => X.ID == ID);

        RemoveCity(c);

    }


    void HandleOnDelete(object sender, EventArgs e)
    {
        RemoveCity(((Component1)sender).city.ID);
    }




}
