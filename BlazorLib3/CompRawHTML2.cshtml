@using Microsoft.AspNetCore.Blazor;
@using Microsoft.AspNetCore.Blazor.RenderTree;


@if (RawHTML == null)
{
    <span>Loading...</span>
}
else
{
    @DynamicHtml
}


@functions {

[Parameter] string RawHTML { get; set; }

RenderFragment DynamicHtml { get; set; }

protected override void OnInit()
{
    RenderHtml();
}

private void RenderHtml()
{
    DynamicHtml = null;
    DynamicHtml = builder =>
    {
        LupParser lp1 = new LupParser(RawHTML);


        if (lp1.Validate())
        {
            try
            {
                lp1.Parse();
            }
            catch (Exception ex)
            {
                lp1.Display_Error(ex.Message);
            }
        }

        int k = 0;

        foreach (var item in lp1.HtmlElements_List)
        {
            Cmd_Render(item, k, builder);
        }
    };
}

public void Cmd_Render(HtmlElement _item, int k, RenderTreeBuilder builder)
{

    builder.OpenElement(k++, _item.Name);
    //Console.WriteLine("open " + _item.Name);


    if (_item.attributes.Any())
    {
        foreach (var item in _item.attributes)
        {
            builder.AddAttribute(k++, item.Key, item.Value.Replace("|", "/"));
            //Console.WriteLine("set attribute - " + item.Key + " = " + item.Value);
        }
    }

    if (!string.IsNullOrEmpty(_item.Content))
    {
        builder.AddContent(k++, _item.Content);
        //Console.WriteLine("set content - " + _item.Content);
    }



    if (_item.children.Any())
    {

        foreach (HtmlElement item in _item.children)
        {
            Cmd_Render(item, k, builder);
        }
    }

    builder.CloseElement();
    //Console.WriteLine("close element " + _item.GetType().Name.ToLower());
}


public void Dispose()
{

}


}